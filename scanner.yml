spec:
  inputs:
    proxy:
      default: '$BOOST_DOCKER_PROXY'
---
variables:
  BOOST_DOCKER_PROXY_direct: ${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX}
  BOOST_DOCKER_PROXY_group: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}
  CI_DOCKER_PROXY: ${BOOST_DOCKER_PROXY_$[[ inputs.proxy | expand_vars ]]}
  BOOST_DOCKER_PROXY_direct_PREFIX: ${BOOST_DOCKER_PROXY_direct}/
  BOOST_DOCKER_PROXY_group_PREFIX: ${BOOST_DOCKER_PROXY_group}/
  BOOST_DOCKER_CLI_IMAGE: ${BOOST_DOCKER_PROXY_$[[ inputs.proxy | expand_vars ]]_PREFIX}docker:28-cli
  BOOST_DOCKER_DND_IMAGE: ${BOOST_DOCKER_PROXY_$[[ inputs.proxy | expand_vars ]]_PREFIX}docker:28-dind

.boost_setup:
  image: $BOOST_DOCKER_CLI_IMAGE

  before_script:
    - |
        {
          source /etc/os-release || true
          case "${ID:-unknown}" in
            alpine)
              apk add --no-cache bash curl git openssh-client coreutils
              ;;
            unknown)
              echo "Unable to detect operating system"
              ;;
          esac;
        }
    - |
        boost_init_config () {
          boost_log_info () {
            printf "$(date +'%H:%M:%S') [\033[34m%s\033[0m] %s\n" "INFO" "${*}"
          }

          boost_log_info "initializing configuration"

          export BOOST_TMP_DIR=${BOOST_TMP_DIR:-${WORKSPACE_TMP:-${TMPDIR:-/tmp}}}
          export BOOST_EXE=${BOOST_EXE:-${BOOST_TMP_DIR}/boost-cli/latest}

          export BOOST_CLI_URL=${BOOST_CLI_URL:-https://assets.build.boostsecurity.io}
                 BOOST_CLI_URL=${BOOST_CLI_URL%*/}
          export BOOST_DOWNLOAD_URL=${BOOST_DOWNLOAD_URL:-${BOOST_CLI_URL}/boost-cli/get-boost-cli}

          export BOOST_LOG_COLORS="true"

          if [ -n "${BOOST_TRIGGER_ID:-}" ]; then
            export BOOST_SCAN_MODE="trigger"
          else
            export BOOST_SCAN_MODE="repo"
          fi
        }

        boost_init_cli () {
          mkdir -p "${BOOST_TMP_DIR}"
          curl --silent "${BOOST_DOWNLOAD_URL}" | bash
        }

        boost_init_config
        boost_init_cli
    - |
      if [ -n "${CI_DOCKER_PROXY:-}" ]; then
        echo "${CI_DEPENDENCY_PROXY_PASSWORD}" | docker login "${CI_DEPENDENCY_PROXY_SERVER}" -u "${CI_DEPENDENCY_PROXY_USER}" --password-stdin
      fi
    - |
      for i in $(seq 1 60); do
        if ! docker info &> /dev/null; then
          echo "Docker not responding yet. Sleeping for 1s..." && sleep 1s
        else
          echo "Docker ready. Continuing build..."
          break
        fi
      done


.boost_dind:
  services:
    - name: $BOOST_DOCKER_DND_IMAGE
      alias: dockerdaemon
      # Support for listening on TCP without authentication or explicit
      # intent to run without authentication will be removed in the next
      # release
      command: ["--host", "tcp://0.0.0.0:2375", "--tls=false"]
  variables:
    DOCKER_HOST: "tcp://dockerdaemon:2375/"
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""

.boost_rules:
  rules:
    # execute on pushes to the default branch
    - if: ($CI_PIPELINE_SOURCE == "push") && ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH)
    # execute on merge request
    - if: ($CI_PIPELINE_SOURCE == "merge_request_event")

.boost_scan:
  extends:
    - .boost_rules
    - .boost_dind
    - .boost_setup
  script:
    -  ${BOOST_EXE} scan ${BOOST_SCAN_MODE} ${BOOST_CLI_ARGUMENTS:-}
  variables:
    GIT_DEPTH: 1
